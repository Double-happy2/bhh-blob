import{_ as s,c as a,o as n,a as e}from"./app.5358fa95.js";const C=JSON.parse('{"title":"函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"创建函数","slug":"创建函数","link":"#创建函数","children":[]}],"relativePath":"js/jsbase/function.md"}'),t={name:"js/jsbase/function.md"},l=e(`<h1 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-hidden="true">#</a></h1><p>函数的定义:是一个功能体，提供若干个数据，返回处理的结果，用于封装重复执行的代码 函数分为系统函数和自定义函数</p><h2 id="创建函数" tabindex="-1">创建函数 <a class="header-anchor" href="#创建函数" aria-hidden="true">#</a></h2><p>函数表达式</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var fun=function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>函数声明</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">函数声明</span></span>
<span class="line"><span style="color:#A6ACCD;">function fn(){</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">以上两者的创建函数的区别</p><p>函数声明创建的函数存在函数的整体提升,函数表达式创建的函数只是存在变量声明提升</p></div>`,8),c=[l];function p(o,i,r,d,_,h){return n(),a("div",null,c)}const A=s(t,[["render",p]]);export{C as __pageData,A as default};
